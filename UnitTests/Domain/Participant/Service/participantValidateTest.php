<?php

include_once(dirname(__FILE__).'/../../../../Services/Autoloader/fabAutoloader.php');

/**
 * Test class for participantValidate.
 * Generated by PHPUnit on 2013-01-03 at 11:48:05.
 */
class participantValidateTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var participantValidate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $autoloader = new Fab\Service\Autoloader\fabAutoloader();
        $autoloader->setConfig(array("plugins" => "C:/xampp/htdocs/c38/contentory/c_server/plugins/"));
        $this->participantValidate = new Fab\Domain\Participant\Service\participantValidate();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement testValidate().
     */
    public function testValidate()
    {

    }
    
    public function testidValidate()
    {
        $this->assertTrue($this->participantValidate->idValidate(""));
        $this->assertFalse(array_key_exists("id", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->idValidate("1"));
        $this->assertFalse(array_key_exists("id", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->idValidate("a"));
        $assertError = array(1 => array("error" => 1, "options" => array("errormsg" => "id darf nur aus Zahlen bestehen.")));
        $this->assertEquals($assertError, $this->participantValidate->getErrorsByKey("id"));
    }
    
    public function testevent_IdValidate()
    {
        $this->assertTrue($this->participantValidate->event_idValidate(""));
        $this->assertFalse(array_key_exists("event_id", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->event_idValidate("1"));
        $this->assertFalse(array_key_exists("event_id", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->event_idValidate("a"));
        $assertError = array(1 => array("error" => 1, "options" => array("errormsg" => "id darf nur aus Zahlen bestehen.")));
        $this->assertEquals($assertError, $this->participantValidate->getErrorsByKey("event_id"));
    }
    
    public function testanredeValidate()
    {
        $this->assertTrue($this->participantValidate->anredeValidate(""));
        $this->assertFalse(array_key_exists("anrede", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->anredeValidate("Herr"));
        $this->assertFalse(array_key_exists("anrede", $this->participantValidate->getErrors()));

        $this->assertFalse($this->participantValidate->anredeValidate("Herrrrrrrrrrrrrrrrrr"));
        $this->error2LengthTest("anrede", 15);
    }
    
    public function testspracheValidate()
    {
        $this->assertTrue($this->participantValidate->spracheValidate(""));
        $this->assertFalse(array_key_exists("sprache", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->spracheValidate("de"));
        $this->assertFalse(array_key_exists("sprache", $this->participantValidate->getErrors()));

        $this->assertFalse($this->participantValidate->spracheValidate("dee"));
        $this->error2LengthTest("sprache", 2);
    }
    
    public function testtitelValidate()
    {
        $this->assertTrue($this->participantValidate->titelValidate(""));
        $this->assertFalse(array_key_exists("titel", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->titelValidate("Prof."));
        $this->assertFalse(array_key_exists("titel", $this->participantValidate->getErrors()));

        $this->assertFalse($this->participantValidate->titelValidate("Profffffffffffffffff."));
        $this->error2LengthTest("titel", 20);
    }
    
    public function testnachnameValidate()
    {
        $this->assertTrue($this->participantValidate->nachnameValidate("Mustermann"));
        $this->assertFalse(array_key_exists("nachname", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->nachnameValidate(""));
        $this->error1RequiredTest("nachname");
        
        $this->assertFalse($this->participantValidate->nachnameValidate("MustermannMustermannMustermannMustermann"));
        $this->error2LengthTest("nachname", 35);

        $this->assertFalse($this->participantValidate->nachnameValidate(""));
        $this->assertFalse($this->participantValidate->nachnameValidate("MustermannMustermannMustermannMustermann"));
        $this->assertEquals($this->baseAssertErrorArray(35),$this->participantValidate->getErrorsByKey("nachname"));
    }
    
    public function testvornameValidate()
    {
        $this->assertTrue($this->participantValidate->vornameValidate("Maximilian"));
        $this->assertFalse(array_key_exists("vorname", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->vornameValidate(""));
        $this->error1RequiredTest("vorname");
        
        $this->assertFalse($this->participantValidate->vornameValidate("MaximilianMaximilianMaximilianMaximilian"));
        $this->error2LengthTest("vorname", 35);

        $this->assertFalse($this->participantValidate->vornameValidate(""));
        $this->assertFalse($this->participantValidate->vornameValidate("MaximilianMaximilianMaximilianMaximilian"));
        $this->assertEquals($this->baseAssertErrorArray(35),$this->participantValidate->getErrorsByKey("vorname"));
    }
    
    public function testinstitutValidate()
    {
        $this->assertTrue($this->participantValidate->institutValidate("Forschungszentrum"));
        $this->assertFalse(array_key_exists("institut", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->institutValidate(""));
        $this->assertFalse(array_key_exists("institut", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->institutValidate("ForschungszentrumForschungszentrumForschungszentrum"));
        $this->error2LengthTest("institut", 35);
    }
    
    public function testunternehmenValidate()
    {
        $this->assertTrue($this->participantValidate->unternehmenValidate("Forschungszentrum"));
        $this->assertFalse(array_key_exists("unternehmen", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->unternehmenValidate(""));
        $this->assertFalse(array_key_exists("unternehmen", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->unternehmenValidate("ForschungszentrumForschungszentrumForschungszentrum"));
        $this->error2LengthTest("unternehmen", 35);
    }
    
    public function teststrasseValidate()
    {
        $this->assertTrue($this->participantValidate->strasseValidate("Rheinstr."));
        $this->assertFalse(array_key_exists("strasse", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->strasseValidate(""));
        $this->assertFalse(array_key_exists("strasse", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->strasseValidate("Rheinstr.Rheinstr.Rheinstr.Rheinstr."));
        $this->error2LengthTest("strasse", 30);
    }
    
    public function testplzValidate()
    {
        $this->assertTrue($this->participantValidate->plzValidate(""));
        $this->assertFalse(array_key_exists("strasse", $this->participantValidate->getErrors()));
        
        $this->participantValidate->setValues(array("land" => "de"));
        $this->assertTrue($this->participantValidate->plzValidate("50823"));
        $this->assertFalse(array_key_exists("strasse", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->plzValidate("508233333"));
        $assertedError = array(1 => array("error" => 1 , "options" => array("errormsg" => "unguelte PLZ")));
        $this->assertEquals($assertedError, $this->participantValidate->getErrorsByKey("plz"));
    }
    
    public function testortValidate()
    {
        $this->assertTrue($this->participantValidate->ortValidate("Ranzel"));
        $this->assertFalse(array_key_exists("ort", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->ortValidate(""));
        $this->error1RequiredTest("ort");
        
        $this->assertFalse($this->participantValidate->ortValidate("RanzelRanzelRanzelRanzelRanzelRanzelRanzel"));
        $this->error2LengthTest("ort", 35);

        $this->assertFalse($this->participantValidate->ortValidate(""));
        $this->assertFalse($this->participantValidate->ortValidate("RanzelRanzelRanzelRanzelRanzelRanzelRanzel"));
        $this->assertEquals($this->baseAssertErrorArray(35),$this->participantValidate->getErrorsByKey("ort"));
    }
    
    public function testlandValidate()
    {
        $this->assertTrue($this->participantValidate->landValidate("de"));
        $this->assertFalse(array_key_exists("land", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->landValidate(""));
        $this->assertFalse(array_key_exists("land", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->landValidate("deee"));
        $this->error2LengthTest("land", 2);
    }
    
    public function testmailValidate()
    {
        $this->assertTrue($this->participantValidate->mailValidate("m.mustermann@fzj-juelich.de"));
        $this->assertFalse(array_key_exists("mail", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->mailValidate(""));
        $assertError = array(1 => array("error" => 1, "options" => array("errormsg" => "Pflichtfeld ist auszufuellen.")));
        $this->assertEquals($assertError, $this->participantValidate->getErrorsByKey("mail"));
        $this->participantValidate->resetErrorKeyForTesting("mail");
        
        $this->assertFalse($this->participantValidate->mailValidate("hallo@hallo"));
        $assertError = array(2 => array("error" => 1, "options" => array("errormsg" => "Es wurde keine korrekte EMail-Adresse eingegeben.")));
        $this->assertEquals($assertError, $this->participantValidate->getErrorsByKey("mail"));
    }
    
    public function testveranstaltungValidate()
    {
        $this->assertTrue($this->participantValidate->veranstaltungValidate("201312"));
        $this->assertFalse(array_key_exists("veranstaltung", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->veranstaltungValidate(""));
        $this->error1RequiredTest("veranstaltung");
        
        $this->assertFalse($this->participantValidate->veranstaltungValidate("201312201312"));
        $this->error2LengthTest("veranstaltung", 8);

        $this->assertFalse($this->participantValidate->veranstaltungValidate(""));
        $this->assertFalse($this->participantValidate->veranstaltungValidate("201312201312"));
        $this->assertEquals($this->baseAssertErrorArray(8),$this->participantValidate->getErrorsByKey("veranstaltung"));
    }
    
    public function testust_id_nrValidate()
    {
        $this->assertTrue($this->participantValidate->ust_id_nrValidate("986743-36436-34g"));
        $this->assertFalse(array_key_exists("ust_id_nr", $this->participantValidate->getErrors()));
        
        $this->assertTrue($this->participantValidate->ust_id_nrValidate(""));
        $this->assertFalse(array_key_exists("ust_id_nr", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->ust_id_nrValidate("986743-36436-34g1203541"));
        $this->error2LengthTest("ust_id_nr", 20);
    }
    
    public function testzahlweiseValidate()
    {
        $this->assertTrue($this->participantValidate->zahlweiseValidate("U"));
        $this->assertFalse(array_key_exists("zahlweise", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->zahlweiseValidate(""));
        $assertedErrors = array(
            1 => array("error" => 1, "options" => array("errormsg" => "Pflichtfeld ist auszufuellen.")),
            3 => array("error" => 1, "options" => array("errormsg" => "unguelte Zahlweisenabkuerzung. ( K = Kreditzahlung, U = Ueberweisung )"))
        );
        $this->assertEquals($assertedErrors,$this->participantValidate->getErrorsByKey("zahlweise"));
        $this->participantValidate->resetErrorKeyForTesting("zahlweise");
        
        $this->assertFalse($this->participantValidate->zahlweiseValidate("UU"));
        $assertedErrors = array(
            2 => array("error" => 1, "options" => array("errormsg" => "Die maximale Zeichenlaenge von 1 Zeichen ist einzuhalten.")),
            3 => array("error" => 1, "options" => array("errormsg" => "unguelte Zahlweisenabkuerzung. ( K = Kreditzahlung, U = Ueberweisung )"))
        );
        $this->assertEquals($assertedErrors,$this->participantValidate->getErrorsByKey("zahlweise"));
        $this->participantValidate->resetErrorKeyForTesting("zahlweise");

        $this->assertFalse($this->participantValidate->zahlweiseValidate(""));
        $this->assertFalse($this->participantValidate->zahlweiseValidate("UU"));
        $this->assertFalse($this->participantValidate->zahlweiseValidate("B"));
        $assertedErrors = array(
            1 => array("error" => 1, "options" => array("errormsg" => "Pflichtfeld ist auszufuellen.")),
            2 => array("error" => 1, "options" => array("errormsg" => "Die maximale Zeichenlaenge von 1 Zeichen ist einzuhalten.")),
            3 => array("error" => 1, "options" => array("errormsg" => "unguelte Zahlweisenabkuerzung. ( K = Kreditzahlung, U = Ueberweisung )"))
        );
        $this->assertEquals($assertedErrors,$this->participantValidate->getErrorsByKey("zahlweise"));
    }
    
    public function testreferenznrValidate()
    {
        $this->assertTrue($this->participantValidate->referenznrValidate("400001"));
        $this->assertFalse(array_key_exists("referenznr", $this->participantValidate->getErrors()));
        
        $this->assertFalse($this->participantValidate->referenznrValidate(""));
        $assertedErrors = array(
            1 => array("error" => 1, "options" => array("errormsg" => "Pflichtfeld ist auszufuellen.")),
            4 => array("error" => 1, "options" => array("errormsg" => "Die Referenznummer besteht nicht aus Zahlen"))
        );
        $this->assertEquals($assertedErrors,$this->participantValidate->getErrorsByKey("referenznr"));
        $this->participantValidate->resetErrorKeyForTesting("referenznr");
        
        $this->assertFalse($this->participantValidate->referenznrValidate("400000000"));
        $assertedErrors = array(
            2 => array("error" => 1, "options" => array("errormsg" => "Die maximale Zeichenlaenge von 8 Zeichen ist einzuhalten."))
        );
        $this->assertEquals($assertedErrors,$this->participantValidate->getErrorsByKey("referenznr"));
        $this->participantValidate->resetErrorKeyForTesting("referenznr");
        
        $this->assertFalse($this->participantValidate->referenznrValidate("abcd123"));
        $assertedErrors = array(
            4 => array("error" => 1, "options" => array("errormsg" => "Die Referenznummer besteht nicht aus Zahlen"))
        );
        $this->assertEquals($assertedErrors,$this->participantValidate->getErrorsByKey("referenznr"));
        $this->participantValidate->resetErrorKeyForTesting("referenznr");
        
        $this->assertFalse($this->participantValidate->referenznrValidate(""));
        $this->assertFalse($this->participantValidate->referenznrValidate("300000"));
        $this->assertFalse($this->participantValidate->referenznrValidate("400000000"));
        $assertedErrors = array(
            1 => array("error" => 1, "options" => array("errormsg" => "Pflichtfeld ist auszufuellen.")),
            2 => array("error" => 1, "options" => array("errormsg" => "Die maximale Zeichenlaenge von 8 Zeichen ist einzuhalten.")),
            3 => array("error" => 1, "options" => array("errormsg" => "Die Referenznummer beginnt bei 400000")),
            4 => array("error" => 1, "options" => array("errormsg" => "Die Referenznummer besteht nicht aus Zahlen"))
        );
        $this->assertEquals($assertedErrors,$this->participantValidate->getErrorsByKey("referenznr"));
    }

    public function testteilnehmer_internValidate()
    {
        $this->assertTrue($this->participantValidate->teilnehmer_internValidate("1"));
        $this->assertFalse(array_key_exists("teilnehmer_intern", $this->participantValidate->getErrors()));
        $this->assertTrue($this->participantValidate->teilnehmer_internValidate("0"));
        $this->assertFalse(array_key_exists("teilnehmer_intern", $this->participantValidate->getErrors()));
        
    }


    public function error1RequiredTest($key)
    {        
        $assertedError = array( 1 => array("error" => 1, "options" => array("errormsg" => "Pflichtfeld ist auszufuellen.")));
        $this->assertEquals($assertedError, $this->participantValidate->getErrorsByKey($key));
        $this->participantValidate->resetErrorKeyForTesting($key);
    }
    
    public function error2LengthTest($key, $length)
    {
        $assertedError = array( 2 => array("error" => 1, "options" => array("errormsg" => "Die maximale Zeichenlaenge von ".$length." Zeichen ist einzuhalten.")));
        $this->assertEquals($assertedError, $this->participantValidate->getErrorsByKey($key));
        $this->participantValidate->resetErrorKeyForTesting($key);
    }
    
    public function dateError1RequiredTest($key)
    {
        $assertedError = array(2 => array("error" => 1, "options" => array("errormsg" => "Eingabe nicht korrekt. Es wurden 0 Zeichen eingegeben. Das Datumsfeld muss aus 8 Zeichen bestehen YYYYMMDD")));
        $this->assertEquals($assertedError, $this->participantValidate->getErrorsByKey($key));
        $this->participantValidate->resetErrorKeyForTesting($key);
    }
    
    public function dateError2YearTest($key)
    {
        $assertedError = array(3 => array("error" => 1, "options" => array("errormsg" => "Ungueltiges Jahr, es darf kein vergangenes Jahr eingegeben werden.")));
        $this->assertEquals($assertedError, $this->participantValidate->getErrorsByKey($key));
        $this->participantValidate->resetErrorKeyForTesting($key);
    }
    
    public function dateError3DateTest($key)
    {
        $assertedError = array(4 => array("error" => 1, "options" => array("errormsg" => "Ungueltiges Datum.")));
        $this->assertEquals($assertedError, $this->participantValidate->getErrorsByKey($key));
        $this->participantValidate->resetErrorKeyForTesting($key);
    }

    public function baseAssertErrorArray($lenght)
    {
        return array(
            1 => array("error" => 1, "options" => array("errormsg" => "Pflichtfeld ist auszufuellen.")),
            2 => array("error" => 1, "options" => array("errormsg" => "Die maximale Zeichenlaenge von ".$lenght." Zeichen ist einzuhalten."))
        );
    }
}

?>
