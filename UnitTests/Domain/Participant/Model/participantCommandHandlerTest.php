<?php
error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);

include_once(dirname(__FILE__) . '/../../../../Services/Autoloader/fabAutoloader.php');
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_object.class.php';
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_db.class.php';
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_db_mysqli.class.php';
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_registry.class.php';
require_once dirname(__FILE__) . '/../../../Config/phpUnitConfig.php';

/**
 * Test class for eventValidate.
 * Generated by PHPUnit on 2013-01-03 at 11:48:05.
 */
class participantCommandHandlerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var eventValidate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $phpUnitConfig = new phpUnitConfig();
        $config = $phpUnitConfig->getConfig();
        
        $db = new lw_db_mysqli($config["lwdb"]["user"], $config["lwdb"]["pass"], $config["lwdb"]["host"], $config["lwdb"]["db"]);
        $db->connect();
        $this->db = $db;
        
        $autoloader = new Fab\Service\Autoloader\fabAutoloader();
        $autoloader->setConfig(array("plugins" => $config["plugins"],
                                     "plugin_path" => array ("lw" => $config["plugin_path"]["lw"] )));
        
        $this->participantCommandHandler = new Fab\Domain\Participant\Model\participantCommandHandler($this->db);
        $this->participantCommandHandler->setDebug(false);        
        
        $this->assertTrue($this->participantCommandHandler->createTable());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->db->setStatement("DROP TABLE t:fab_teilnehmer ");
        $this->db->pdbquery();
    }

    /**
     * @todo Implement test().
     */
    public function testCreateTable()
    {
        $this->tearDown();
        
        $this->assertTrue($this->participantCommandHandler->createTable());
        $this->assertTrue($this->db->tableExists($this->db->gt("fab_teilnehmer")));
    }
    
    public function testAddParticipant()
    {
        $array = array(
                "anrede"                => "Herr",
                "sprache"               => "de",
                "titel"                 => "Prof.",
                "nachname"              => "Meyer",
                "vorname"               => "Karl",
                "institut"              => "GB-F",
                "unternehmen"           => "FZentrumJuelich",
                "unternehmenshortcut"   => "FZJ",
                "strasse"               => "Wilhelm_Johnen-Str.",
                "plz"                   => "52428",
                "ort"                   => "JÃ¼lich",
                "land"                  => "de",
                "mail"                  => "m.mustermann@fzj-juelich.de",
                "ust_id_nr"             => "986743-36436-34g",
                "zahlweise"             => "K",
                "teilnehmer_intern"     => "1",
                "betrag"                => "105,73"
            );
        
        $participantValueObjectMock = $this->getParticipantValueObjectMock($array);
        $participantValueObjectMock->expects($this->at(0))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["anrede"]));
        $participantValueObjectMock->expects($this->at(1))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["sprache"]));
        $participantValueObjectMock->expects($this->at(2))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["titel"]));
        $participantValueObjectMock->expects($this->at(3))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["nachname"]));
        $participantValueObjectMock->expects($this->at(4))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["vorname"]));
        $participantValueObjectMock->expects($this->at(5))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["institut"]));
        $participantValueObjectMock->expects($this->at(6))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["unternehmen"]));
        $participantValueObjectMock->expects($this->at(7))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["unternehmenshortcut"]));
        $participantValueObjectMock->expects($this->at(8))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["strasse"]));
        $participantValueObjectMock->expects($this->at(9))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["plz"]));
        $participantValueObjectMock->expects($this->at(10))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["ort"]));
        $participantValueObjectMock->expects($this->at(11))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["land"]));
        $participantValueObjectMock->expects($this->at(12))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["mail"]));
        $participantValueObjectMock->expects($this->at(13))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["ust_id_nr"]));
        $participantValueObjectMock->expects($this->at(14))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["zahlweise"]));
        $participantValueObjectMock->expects($this->at(15))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["teilnehmer_intern"]));
        $participantValueObjectMock->expects($this->at(16))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["betrag"]));
        
       $this->assertTrue($this->participantCommandHandler->addParticipant(1, $participantValueObjectMock));
       
       $this->db->setStatement("SELECT * FROM t:fab_teilnehmer WHERE id = 1 ");
       $result = $this->db->pselect1();
       unset($result["id"]);
       unset($result["first_date"]);
       unset($result["last_date"]);
       
       $assertedArray = array(
                "event_id"              => 1,
                "anrede"                => "Herr",
                "sprache"               => "de",
                "titel"                 => "Prof.",
                "nachname"              => "Meyer",
                "vorname"               => "Karl",
                "institut"              => "GB-F",
                "unternehmen"           => "FZentrumJuelich",
                "unternehmenshortcut"   => "FZJ",
                "strasse"               => "Wilhelm_Johnen-Str.",
                "plz"                   => "52428",
                "ort"                   => "JÃ¼lich",
                "land"                  => "de",
                "mail"                  => "m.mustermann@fzj-juelich.de",
                "ust_id_nr"             => "986743-36436-34g",
                "zahlweise"             => "K",
                "teilnehmer_intern"     => "1",
                "betrag"                => "105,73"
            );
       
        $this->assertEquals($assertedArray, $result);
    }
    
    public function testSaveParticipant()
    {
        $this->fillTable(1);
        
       $array = array(
                "anrede"                => "Frau",
                "sprache"               => "de",
                "titel"                 => "Dr.",
                "nachname"              => "Mueller",
                "vorname"               => "Heike",
                "institut"              => "BMBF",
                "unternehmen"           => "FZentrumJuelich",
                "unternehmenshortcut"   => "FZJ",
                "strasse"               => "Wilhelm_Johnen-Str.",
                "plz"                   => "52428",
                "ort"                   => "JÃ¼lich",
                "land"                  => "de",
                "mail"                  => "m.mustermann@fzj-juelich.de",
                "ust_id_nr"             => "986743-36436-34g",
                "zahlweise"             => "K",
                "teilnehmer_intern"     => "1",
                "betrag"                => "105,73"
            );
       
        $participantValueObjectMock = $this->getParticipantValueObjectMock($array);
        $participantValueObjectMock->expects($this->at(0))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["anrede"]));
        $participantValueObjectMock->expects($this->at(1))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["sprache"]));
        $participantValueObjectMock->expects($this->at(2))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["titel"]));
        $participantValueObjectMock->expects($this->at(3))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["nachname"]));
        $participantValueObjectMock->expects($this->at(4))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["vorname"]));
        $participantValueObjectMock->expects($this->at(5))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["institut"]));
        $participantValueObjectMock->expects($this->at(6))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["unternehmen"]));
        $participantValueObjectMock->expects($this->at(7))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["unternehmenshortcut"]));
        $participantValueObjectMock->expects($this->at(8))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["strasse"]));
        $participantValueObjectMock->expects($this->at(9))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["plz"]));
        $participantValueObjectMock->expects($this->at(10))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["ort"]));
        $participantValueObjectMock->expects($this->at(11))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["land"]));
        $participantValueObjectMock->expects($this->at(12))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["mail"]));
        $participantValueObjectMock->expects($this->at(13))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["ust_id_nr"]));
        $participantValueObjectMock->expects($this->at(14))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["zahlweise"]));
        $participantValueObjectMock->expects($this->at(15))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["teilnehmer_intern"]));
        $participantValueObjectMock->expects($this->at(16))
                                   ->method("getValueByKey")
                                   ->will($this->returnValue($array["betrag"]));
        
       $this->assertTrue($this->participantCommandHandler->saveParticipant(1,$participantValueObjectMock));
       
       $this->db->setStatement("SELECT * FROM t:fab_teilnehmer WHERE id = 1 ");
       $result = $this->db->pselect1();
       unset($result["id"]);
       unset($result["first_date"]);
       unset($result["last_date"]);
       
       $assertedArray = array(
                "event_id"              => 1,
                "anrede"                => "Frau",
                "sprache"               => "de",
                "titel"                 => "Dr.",
                "nachname"              => "Mueller",
                "vorname"               => "Heike",
                "institut"              => "BMBF",
                "unternehmen"           => "FZentrumJuelich",
                "unternehmenshortcut"   => "FZJ",
                "strasse"               => "Wilhelm_Johnen-Str.",
                "plz"                   => "52428",
                "ort"                   => "JÃ¼lich",
                "land"                  => "de",
                "mail"                  => "m.mustermann@fzj-juelich.de",
                "ust_id_nr"             => "986743-36436-34g",
                "zahlweise"             => "K",
                "teilnehmer_intern"     => "1",
                "betrag"                => "105,73"
            );
        $this->assertEquals($assertedArray, $result);
    }

    public function testDeleteParticipant()
    {
        $this->fillTable(1);
        
        $participantEntityMock = $this->getParticipantEntityMock();
        $participantEntityMock->expects($this->once())
                              ->method("isDeleteable")
                              ->will($this->returnValue(true));
        $participantEntityMock->expects($this->exactly(2))
                              ->method("getId")
                              ->will($this->returnValue(1));

        $this->assertTrue($this->participantCommandHandler->deleteParticipant($participantEntityMock));
        
        $this->db->setStatement("SELECT * FROM t:fab_teilnehmer WHERE id = 1 ");
        $this->assertEmpty($this->db->pselect1());
    }

    public function getParticipantEntityMock()
    {
        /* $this->getMock(
         *      Name der zu mockenden Klasse,
         *      array( Functionsnamen ),            [ leeres Array => alle Functionen werden gemockt]
         *      array( uebergebene Konstuktor Argumente ),
         *      "",                                 [ Klassenname des Mockobjektes ]
         *      bool                                [ Den Konstruktor der Original Klasse aufrufen ]
         *  );
         */
        return $this->getMock("\\Fab\\Domain\\Event\\Object\\event", array(), array(), "", false);
    }
    
    public function getParticipantValueObjectMock($array)
    {
        return $this->getMock("\\LWddd\\ValueObject", array(), array($array), "", true);
    }
    
    public function fillTable($event_id)
    {
        $array = array(
                "anrede"                => "Herr",
                "sprache"               => "de",
                "titel"                 => "Prof.",
                "nachname"              => "Meyer",
                "vorname"               => "Karl",
                "institut"              => "GB-F",
                "unternehmen"           => "FZentrumJuelich",
                "unternehmenshortcut"   => "FZJ",
                "strasse"               => "Wilhelm_Johnen-Str.",
                "plz"                   => "52428",
                "ort"                   => "JÃ¼lich",
                "land"                  => "de",
                "mail"                  => "m.mustermann@fzj-juelich.de",
                "ust_id_nr"             => "986743-36436-34g",
                "zahlweise"             => "K",
                "teilnehmer_intern"     => "1",
                "betrag"                => "105,73"
            );
        
        $this->db->setStatement("INSERT INTO t:fab_teilnehmer ( event_id, anrede, sprache, titel, nachname, vorname, institut, unternehmen, unternehmenshortcut, strasse, plz, ort, land, mail, ust_id_nr, zahlweise, teilnehmer_intern, betrag, first_date, last_date ) VALUES ( :event_id, :anrede, :sprache, :titel, :nachname, :vorname, :institut, :unternehmen, :shortcut, :strasse, :plz, :ort, :land, :mail, :ust_id_nr, :zahlweise, :teilnehmer_intern, :betrag, :first_date, :last_date ) ");
        $this->db->bindParameter("event_id", "i", $event_id);
        $this->db->bindParameter("anrede", "s", $array['anrede']);
        $this->db->bindParameter("sprache", "s", $array['sprache']);
        $this->db->bindParameter("titel", "s", $array['titel']);
        $this->db->bindParameter("nachname", "s", $array['nachname']);
        $this->db->bindParameter("vorname", "s", $array['vorname']);
        $this->db->bindParameter("institut", "s", $array['institut']);
        $this->db->bindParameter("unternehmen", "s", $array['unternehmen']);
        $this->db->bindParameter("shortcut", "s", $array['unternehmenshortcut']);
        $this->db->bindParameter("strasse", "s", $array['strasse']);
        $this->db->bindParameter("plz", "s", $array['plz']);
        $this->db->bindParameter("ort", "s", $array['ort']);
        $this->db->bindParameter("land", "s", $array['land']);
        $this->db->bindParameter("mail", "s", $array['mail']);
        $this->db->bindParameter("ust_id_nr", "s", $array['ust_id_nr']);
        $this->db->bindParameter("zahlweise", "s", $array['zahlweise']);
        $this->db->bindParameter("teilnehmer_intern", "i", $array['teilnehmer_intern']);
        $this->db->bindParameter("betrag", "s", $array['betrag']);
        $this->db->bindParameter("first_date", "i", date("YmdHis"));
        $this->db->bindParameter("last_date", "i", date("YmdHis"));
        
        return $this->db->pdbquery();
    }
}