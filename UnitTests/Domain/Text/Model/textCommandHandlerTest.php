<?php
error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);

include_once(dirname(__FILE__) . '/../../../../Services/Autoloader/fabAutoloader.php');
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_object.class.php';
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_db.class.php';
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_db_mysqli.class.php';
require_once dirname(__FILE__) . '/../../../../../../../c_libraries/lw/lw_registry.class.php';
require_once dirname(__FILE__) . '/../../../Config/phpUnitConfig.php';

/**
 * Test class for eventValidate.
 * Generated by PHPUnit on 2013-01-03 at 11:48:05.
 */
class textCommandHandlerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var eventValidate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $phpUnitConfig = new phpUnitConfig();
        $config = $phpUnitConfig->getConfig();
        
        $db = new lw_db_mysqli($config["lwdb"]["user"], $config["lwdb"]["pass"], $config["lwdb"]["host"], $config["lwdb"]["db"]);
        $db->connect();
        $this->db = $db;
        
        $autoloader = new Fab\Service\Autoloader\fabAutoloader();
        $autoloader->setConfig(array("plugins" => $config["plugins"],
                                     "plugin_path" => array ("lw" => $config["plugin_path"]["lw"] )));
        
        $this->textCommandHandler = new Fab\Domain\Text\Model\textCommandHandler($this->db);
        $this->textCommandHandler->setDebug(false);        
        
        $this->assertTrue($this->textCommandHandler->createTable());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->db->setStatement("DROP TABLE t:fab_text ");
        $this->db->pdbquery();
    }

    /**
     * @todo Implement test().
     */
    public function testCreateTable()
    {
        $this->tearDown();
        
        $this->assertTrue($this->textCommandHandler->createTable());
        $this->assertTrue($this->db->tableExists($this->db->gt("fab_Text")));
    }
    
    public function testAddText()
    {
        $array = array(
                "key"       => "test key", 
                "content"   => "ttttttttttttttttttteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeessssssssssssssssssssssssssssssssssstttttttttttttttt   content", 
                "language"  => "de", 
                "category"  => "test category");
        $this->fillTable($array);
        
        $array2 = array(
                "key"       => "test key", 
                "content"   => "ttttttttttttttttttteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeessssssssssssssssssssssssssssssssssstttttttttttttttt   content", 
                "language"  => "en", 
                "category"  => "test category");
        $this->fillTable($array2);
        
        $array3 = array(
                "key"       => "test key", 
                "content"   => "ttttttttttttttttttteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeessssssssssssssssssssssssssssssssssstttttttttttttttt   content", 
                "language"  => "de", 
                "category"  => "test category2");
        $this->fillTable($array3);
        
        $this->db->setStatement("SELECT * FROM t:fab_text ");
        $result = $this->db->pselect();
        
        unset($result[0]["id"]);
        unset($result[0]["first_date"]);
        unset($result[0]["last_date"]);
        unset($result[1]["id"]);
        unset($result[1]["first_date"]);
        unset($result[1]["last_date"]);
        unset($result[2]["id"]);
        unset($result[2]["first_date"]);
        unset($result[2]["last_date"]);
        
        $assertedArray = array();
        $array["language"] = "de";
        $assertedArray[] = $array;
        $assertedArray[] = $array2;
        $assertedArray[] = $array3;
        
        $this->assertEquals($assertedArray, $result);
    }
    
    public function testSaveText()
    {
        $this->fillTableWithoutFunctionAddText();
        
        $array = array(
                "key"       => "updated key", 
                "content"   => "updated content", 
                "language"  => "de", 
                "category"  => "test category");
        
        $textValueObjectMock = $this->getTextValueObjectMock($array);
        $textValueObjectMock->expects($this->at(0))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["key"]));
        $textValueObjectMock->expects($this->at(1))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["content"]));
        $textValueObjectMock->expects($this->at(2))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["language"]));
        $textValueObjectMock->expects($this->at(3))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["language"]));
        $textValueObjectMock->expects($this->at(4))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["category"]));
        $this->assertTrue($this->textCommandHandler->saveText(1,$textValueObjectMock));
        
        $this->db->setStatement("SELECT * FROM t:fab_text WHERE id = 1 ");
        $result = $this->db->pselect1();
        
        unset($result["id"]);
        unset($result["first_date"]);
        unset($result["last_date"]);
        
        $this->assertEquals($array, $result);
    }
    
    public function testDeleteText()
    {
        $this->fillTableWithoutFunctionAddText();
        
        $textEntityMock = $this->getTextEntityMock();
        $textEntityMock->expects($this->once())
                       ->method("isDeleteable")
                       ->will($this->returnValue(true));
        $textEntityMock->expects($this->exactly(2))
                       ->method("getId")
                       ->will($this->returnValue(1));
        
        $this->assertTrue($this->textCommandHandler->deleteText($textEntityMock));
    }

    public function getTextEntityMock()
    {
        /* $this->getMock(
         *      Name der zu mockenden Klasse,
         *      array( Functionsnamen ),            [ leeres Array => alle Functionen werden gemockt]
         *      array( uebergebene Konstuktor Argumente ),
         *      "",                                 [ Klassenname des Mockobjektes ]
         *      bool                                [ Den Konstruktor der Original Klasse aufrufen ]
         *  );
         */
        return $this->getMock("\\Fab\\Domain\\Event\\Object\\event", array(), array(), "", false);
    }
    
    public function getTextValueObjectMock($array)
    {
        return $this->getMock("\\LWddd\\ValueObject", array(), array($array), "", true);
    }
    
    public function fillTable($array)
    {
        $textValueObjectMock = $this->getTextValueObjectMock($array);
        $textValueObjectMock->expects($this->at(0))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["key"]));
        $textValueObjectMock->expects($this->at(1))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["content"]));
        $textValueObjectMock->expects($this->at(2))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["language"]));
        $textValueObjectMock->expects($this->at(3))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["language"]));
        $textValueObjectMock->expects($this->at(4))
                            ->method("getValueByKey")
                            ->will($this->returnValue($array["category"]));
        $this->assertTrue($this->textCommandHandler->addText($textValueObjectMock));
    }
    
    public function fillTableWithoutFunctionAddText()
    {
        $array = array(
                "key"       => "test key", 
                "content"   => "ttttttttttttttttttteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeessssssssssssssssssssssssssssssssssstttttttttttttttt   content", 
                "language"  => "de", 
                "category"  => "test category");
        
        $this->db->setStatement("INSERT INTO t:fab_text ( `key`, content, language, category, first_date, last_date ) VALUES ( :key, :content, :language, :category, :first_date, :last_date ) ");
        $this->db->bindParameter("key", "s", $array['key']);
        $this->db->bindParameter("content", "s", $array['content']);
        if($array['language'] == ""){
            $this->db->bindParameter("language", "s", "de");
        }else{
            $this->db->bindParameter("language", "s", $array['language']);
        }
        $this->db->bindParameter("category", "s", $array['category']);
        $this->db->bindParameter("first_date", "i", date("YmdHis"));
        $this->db->bindParameter("last_date", "i", date("YmdHis"));
        
       return $this->db->pdbquery();
    }
}