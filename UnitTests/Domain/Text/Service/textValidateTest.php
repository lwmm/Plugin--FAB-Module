<?php

include_once(dirname(__FILE__).'/../../../../Services/Autoloader/fabAutoloader.php');

/**
 * Test class for textValidate.
 * Generated by PHPUnit on 2013-01-03 at 11:48:05.
 */
class textValidateTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var textValidate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $autoloader = new Fab\Service\Autoloader\fabAutoloader();
        $autoloader->setConfig(array("plugins" => "C:/xampp/htdocs/c38/contentory/c_server/plugins/"));
        $this->textValidate = new Fab\Domain\Text\Service\textValidate();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement testValidate().
     */
    public function testValidate()
    {
        $array = array(
                "id"        => "",
                "key"       => "test key", 
                "content"   => "ttttttttttttttttttteeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeessssssssssssssssssssssssssssssssssstttttttttttttttt   content", 
                "language"  => "de", 
                "category"  => "category1");
        
        $this->textValidate->setValues($array);
        $this->assertTrue($this->textValidate->validate());
        $this->assertEmpty($this->textValidate->getErrors());
        
        $array2 = array(
                "id"        => "",
                "key"       => "", 
                "content"   => "", 
                "language"  => "", 
                "category"  => "");
        
        $this->textValidate->setValues($array2);
        $this->textValidate->validate();
        $error = $this->textValidate->getErrors();
        $this->assertTrue(is_array($error));
        
        $this->assertFalse(array_key_exists("id", $error));
        $this->assertEquals($error["key"], array(1 => array("error" => 1, "options" => "")));
        $this->assertEquals($error["content"], array(1 => array("error" => 1, "options" => "")));
        $this->assertEquals($error["language"], array(1 => array("error" => 1, "options" => "")));
        $this->assertEquals($error["category"], array(1 => array("error" => 1, "options" => "")));
    }
    
    public function testIdValidate()
    {
        $this->assertTrue($this->textValidate->idValidate(""));
        $this->assertFalse(array_key_exists("id", $this->textValidate->getErrors()));
        
        $this->assertTrue($this->textValidate->idValidate("1"));
        $this->assertFalse(array_key_exists("id", $this->textValidate->getErrors()));
        
        $this->assertFalse($this->textValidate->idValidate("a"));
        $assertError = array(6 => array("error" => 1,"options" => ""));
        $this->assertEquals($assertError, $this->textValidate->getErrorsByKey("id"));
    }
    
    public function testKeyValidate()
    {
        $this->assertTrue($this->textValidate->keyValidate("0100adasdasfdfa"));
        $this->assertFalse(array_key_exists("key", $this->textValidate->getErrors()));
        
        $this->assertFalse($this->textValidate->keyValidate(""));
        $this->error1RequiredTest("key");
        
        $value = "";
        for($i = 0 ; $i <= 255 ; $i++){
            $value.= "a";
        }
        
        $this->assertFalse($this->textValidate->keyValidate($value));
        $this->error2LengthTest("key", 255, $value);
    }
    
    public function testContentValidation()
    {
        $this->assertTrue($this->textValidate->contentValidate("0100adasdasfdfa"));
        $this->assertFalse(array_key_exists("content", $this->textValidate->getErrors()));
        
        $this->assertFalse($this->textValidate->contentValidate(""));
        $this->error1RequiredTest("content");
        
        $value = "";
        for($i = 0 ; $i <= 4000000 ; $i++){
            $value.= "a";
        }
        
        $this->assertFalse($this->textValidate->contentValidate($value));
        $this->error2LengthTest("content", 4000000, $value);
    }
    
    public function testLanguageValidate()
    {
        $this->assertTrue($this->textValidate->languageValidate("de"));
        $this->assertFalse(array_key_exists("language", $this->textValidate->getErrors()));
        
        $this->assertFalse($this->textValidate->languageValidate(""));
        $this->error1RequiredTest("language");

        $this->assertFalse($this->textValidate->languageValidate("eng"));
        $this->error2LengthTest("language", 2, "eng");
    }
    
    public function testCategoryValidate()
    {
        $this->assertTrue($this->textValidate->categoryValidate("de"));
        $this->assertFalse(array_key_exists("category", $this->textValidate->getErrors()));
        
        $this->assertFalse($this->textValidate->categoryValidate(""));
        $this->error1RequiredTest("category");

        $value = "";
        for($i = 0 ; $i <= 255 ; $i++){
            $value.= "a";
        }
        
        $this->assertFalse($this->textValidate->categoryValidate($value));
        $this->error2LengthTest("category", 255, $value);
    }

    public function error1RequiredTest($key)
    {        
        $assertedError = array( 1 => array("error" => 1 ,"options" => ""));
        $this->assertEquals($assertedError, $this->textValidate->getErrorsByKey($key));
        $this->textValidate->resetErrorKeyForTesting($key);
    }
    
    public function error2LengthTest($key, $length, $value)
    {
        $assertedError = array( 2 => array("error" => 1, "options" => array("maxlength" => $length, "actuallength" => strlen($value))));
        $this->assertEquals($assertedError, $this->textValidate->getErrorsByKey($key));
        $this->textValidate->resetErrorKeyForTesting($key);
    }
}