<?php

include_once(dirname(__FILE__).'/../../../../Services/Autoloader/fabAutoloader.php');

/**
 * Test class for eventValidate.
 * Generated by PHPUnit on 2013-01-03 at 11:48:05.
 */
class eventValidateTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var eventValidate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $autoloader = new Fab\Service\Autoloader\fabAutoloader();
        $autoloader->setConfig(array("plugins" => "C:/xampp/htdocs/c38/contentory/c_server/plugins/"));
        $this->eventValidate = new Fab\Domain\Event\Service\eventValidate();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @todo Implement testValidate().
     */
    public function testValidate() {

        $array = array(
            "id" => "1",
            "buchungskreis" => "15",
            "v_schluessel" => "65038462",
            "auftragsnr" => "45135060",
            "bezeichnung" => "Tagung 1",
            "v_land" => "de",
            "v_ort" => "Jülich",
            "anmeldefrist_beginn" => "20130701",
            "anmeldefrist_ende" => "20130704",
            "v_beginn" => "20130905",
            "v_ende" => "20130916",
            "cpd_konto" => "200270",
            "erloeskonto" => "4510",
            "steuerkennzeichen" => "98",
            "steuersatz" => "9",
            "ansprechpartner" => "Max Mustermann",
            "ansprechpartner_tel" => "1111",
            "organisationseinheit" => "GB-F",
            "ansprechpartner_mail" => "m.mustermann@fz-juelich.de",
            "stellvertreter_mail" => "s.vertreter@fz-juelich.de",
            "standardbetrag" => "100",
        );
        
        $this->assertTrue($this->eventValidate->idValidate($array["id"]));
        $this->assertTrue($this->eventValidate->buchungskreisValidate($array["buchungskreis"]));
        $this->assertTrue($this->eventValidate->v_schluesselValidate($array["v_schluessel"]));
        $this->assertTrue($this->eventValidate->auftragsnrValidate($array["auftragsnr"]));
        $this->assertTrue($this->eventValidate->bezeichnungValidate($array["bezeichnung"]));
        $this->assertTrue($this->eventValidate->v_landValidate($array["v_land"]));
        $this->assertTrue($this->eventValidate->v_ortValidate($array["v_ort"]));
        $this->assertTrue($this->eventValidate->anmeldefrist_beginnValidate($array["anmeldefrist_beginn"]));
        $this->assertTrue($this->eventValidate->anmeldefrist_endeValidate($array["anmeldefrist_ende"]));
        $this->assertTrue($this->eventValidate->v_beginnValidate($array["v_beginn"]));
        $this->assertTrue($this->eventValidate->v_endeValidate($array["v_ende"]));
        $this->assertTrue($this->eventValidate->cpd_kontoValidate($array["cpd_konto"]));
        $this->assertTrue($this->eventValidate->erloeskontoValidate($array["erloeskonto"]));
        $this->assertTrue($this->eventValidate->steuerkennzeichenValidate($array["steuerkennzeichen"]));
        $this->assertTrue($this->eventValidate->steuersatzValidate($array["steuersatz"]));
        $this->assertTrue($this->eventValidate->ansprechpartnerValidate($array["ansprechpartner"]));
        $this->assertTrue($this->eventValidate->ansprechpartner_telValidate($array["ansprechpartner_tel"]));
        $this->assertTrue($this->eventValidate->organisationseinheitValidate($array["organisationseinheit"]));
        $this->assertTrue($this->eventValidate->ansprechpartner_mailValidate($array["ansprechpartner_mail"]));
        $this->assertTrue($this->eventValidate->stellvertreter_mailValidate($array["stellvertreter_mail"]));
        $this->assertTrue($this->eventValidate->standardbetragValidate($array["standardbetrag"]));

        $this->eventValidate->setValues($array);
        $this->assertTrue($this->eventValidate->validate());
        $this->assertEquals(array(), $this->eventValidate->getErrors());


//        $array2 = array(
//            "id" => "aa11aa",
//            "buchungskreis" => "", 
//            "v_schluessel" => "12345678", 
//            "auftragsnr" => "45135060eqw1rf", 
//            "bezeichnung" => "Tagung 12345678900001234567890123456789012345678901234",
//            "v_land" => "de312", 
//            "v_ort" => "Jülich789012345678901234567890123456",
//            "anmeldefrist_beginn" => "1913070112312",
//            "anmeldefrist_ende" => "20131504",
//            "v_beginn" => "20130900",
//            "v_ende" => "", 
//            "cpd_konto" => "200270789012231",
//            "erloeskonto" => "4510123289372984729",
//            "steuerkennzeichen" => "98rhwrhwerhw", 
//            "steuersatz" => "9412414142fefewsefs", 
//            "ansprechpartner" => "Max Mustermann5678901234567890123",
//            "ansprechpartner_tel" => "012345asd",
//            "organisationseinheit" => "GB-F5678901234",
//            #php email validierungsfunktion:
//            #[max 64 zeichen]@[max 63 zeichen].[max 63 zeichen]
//            "ansprechpartner_mail" => "",
//            "stellvertreter_mail" => "",
//            "standardbetrag" => "1004567890123456789"
//        );
//
//        $this->eventValidate->setValues($array2);
//        $this->eventValidate->validate();
//        $error = $this->eventValidate->getErrors();
//        $this->assertTrue(is_array($error));
//
//        $this->assertEquals($error["id"][1]["error"],1);#idValidate fehler #1 [buchstaben gefunden]
//        
//        $this->assertEquals($error["buchungskreis"][1]["error"], 1); #defaultValidation fehler #1 [leer]
//        $this->assertFalse(array_key_exists(2, $error["buchungskreis"])); #defaultValidation fehler #2 [max zeichen ueberschritten] 
//        $this->assertTrue($this->eventValidate->v_schluesselValidate($array2["v_schluessel"])); #defaultValidation exakte max length
//        $this->assertEquals($error["auftragsnr"][2]["error"], 1); #defaultValidation fehler #2 [max zeichen ueberschritten]
//       
//        $this->assertEquals($error["ansprechpartner_mail"][1]["error"], 1); #emailValidation fehler #1 [leer]        
//        $this->assertFalse(array_key_exists("stellvertreter_mail", $error));
//
//        $this->assertEquals($error["v_ende"][2]["error"],1); #dateValidation fehler #1 [leer] 
//        $this->assertFalse(array_key_exists(1, $error["anmeldefrist_beginn"])); #dateValidation fehler #1 [leer] 
//        $this->assertEquals($error["anmeldefrist_beginn"][2]["error"],1); #dateValidation fehler #2 [zeichenlaenge passt nicht] 
//        $this->assertEquals($error["anmeldefrist_beginn"][3]["error"],1); #dateValidation fehler #3 [vergangenes jahr] 
//        $this->assertFalse(array_key_exists(4, $error["anmeldefrist_beginn"])); #dateValidation fehler #4 [falsches datum] 
//        $this->assertFalse(array_key_exists(5, $error["anmeldefrist_beginn"])); #dateValidation fehler #5 [stunde] 
//        $this->assertFalse(array_key_exists(6, $error["anmeldefrist_beginn"])); #dateValidation fehler #6 [minute] 
//        $this->assertFalse(array_key_exists(7, $error["anmeldefrist_beginn"])); #dateValidation fehler #7 [sekunde] 
//        $this->assertEquals($error["anmeldefrist_ende"][4]["error"],1); #dateValidation fehler #4 [falsches datum] 
//        $this->assertEquals($error["v_beginn"][4]["error"],1); #dateValidation fehler #4 [falsches datum] 
    }
    
    public function testIdValidate()
    {
        $this->assertTrue($this->eventValidate->idValidate(""));
        $this->assertFalse(array_key_exists("id", $this->eventValidate->getErrors()));
        
        $this->assertTrue($this->eventValidate->idValidate("1"));
        $this->assertFalse(array_key_exists("id", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->idValidate("a"));
        $assertError = array(6 => array("error" => 1,"options" => ""));
        $this->assertEquals($assertError, $this->eventValidate->getErrorsByKey("id"));
    }
    
    public function testBuchungskreisValidate()
    {
        $this->assertTrue($this->eventValidate->buchungskreisValidate("0100"));
        $this->assertFalse(array_key_exists("buchungskreis", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->buchungskreisValidate(""));
        $this->error1RequiredTest("buchungskreis");
        
        $this->assertFalse($this->eventValidate->buchungskreisValidate("ab345"));
        $this->error2LengthTest("buchungskreis", 4, "ab345");
    }
    
    public function testv_schluesselValidate()
    {
        $this->assertTrue($this->eventValidate->v_schluesselValidate("65038462"));
        $this->assertFalse(array_key_exists("v_schluessel", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->v_schluesselValidate(""));
        $this->error1RequiredTest("v_schluessel");
        
        $this->assertFalse($this->eventValidate->v_schluesselValidate("abcdefghj"));
        $this->error2LengthTest("v_schluessel", 8, "abcdefghj");
    }
    
    public function testauftragsnrValidate()
    {
        $this->assertTrue($this->eventValidate->auftragsnrValidate("000001234567"));
        $this->assertFalse(array_key_exists("auftragsnr", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->auftragsnrValidate(""));
        $this->error1RequiredTest("auftragsnr");
        
        $this->assertFalse($this->eventValidate->auftragsnrValidate("0120124552414"));
        $this->error2LengthTest("auftragsnr", 12,"0120124552414");
    }
    
    public function testbezeichnungValidate()
    {
        $this->assertTrue($this->eventValidate->bezeichnungValidate("Tagung 1 - Projektmanagement Vorbereitung"));
        $this->assertFalse(array_key_exists("bezeichnung", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->bezeichnungValidate(""));
        $this->error1RequiredTest("bezeichnung");
        
        $this->assertFalse($this->eventValidate->bezeichnungValidate("Tagung 1 - ProjektmanagementTagung 1 - Projektmanagement"));
        $this->error2LengthTest("bezeichnung", 50, "Tagung 1 - ProjektmanagementTagung 1 - Projektmanagement");
    }
    
    public function testv_landValidate()
    {
        $this->assertTrue($this->eventValidate->v_ortValidate("Immendorf"));
        $this->assertFalse(array_key_exists("v_ort", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->v_ortValidate(""));
        $this->error1RequiredTest("v_ort");
        
        $this->assertFalse($this->eventValidate->v_ortValidate("Ehrenfeld-Wesseling-Urfeld-Ranzellll"));
        $this->error2LengthTest("v_ort", 35, "Ehrenfeld-Wesseling-Urfeld-Ranzellll");
    }
    
    public function testv_ortValidate()
    {
        $this->assertTrue($this->eventValidate->v_landValidate("de"));
        $this->assertFalse(array_key_exists("v_land", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->v_landValidate(""));
        $this->error1RequiredTest("v_land");
        
        $this->assertFalse($this->eventValidate->v_landValidate("deee"));
        $this->error2LengthTest("v_land", 2, "deee");
    }

    public function testanmeldefrist_beginnValidate()
    {
        $this->assertTrue($this->eventValidate->anmeldefrist_beginnValidate(date("Y")."0110"));
        $this->assertFalse(array_key_exists("anmeldefrist_beginn", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->anmeldefrist_beginnValidate(""));
        $this->dateError1or2Test("anmeldefrist_beginn","");
        
        $this->assertFalse($this->eventValidate->anmeldefrist_beginnValidate("201201101"));
        $this->dateError1or2Test("anmeldefrist_beginn","201201101");
        
        $this->assertFalse($this->eventValidate->anmeldefrist_beginnValidate("20120110"));
        $this->dateError2YearTest("anmeldefrist_beginn","20120110");
        
        $this->assertFalse($this->eventValidate->anmeldefrist_beginnValidate(date("Y")."1310"));
        $this->dateError3DateTest("anmeldefrist_beginn", date("Y")."1310");
        
        $this->assertFalse($this->eventValidate->anmeldefrist_beginnValidate(date("Y")."0230"));
        $this->dateError3DateTest("anmeldefrist_beginn", date("Y")."0230");
    }
    
    public function testanmeldefrist_endeValidate()
    {
        $this->assertTrue($this->eventValidate->anmeldefrist_endeValidate(date("Y")."0110"));
        $this->assertFalse(array_key_exists("anmeldefrist_ende", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->anmeldefrist_endeValidate(""));
        $this->dateError1or2Test("anmeldefrist_ende", "");
        
        $this->assertFalse($this->eventValidate->anmeldefrist_endeValidate("201201101"));
        $this->dateError1or2Test("anmeldefrist_ende", "201201101");
        
        $this->assertFalse($this->eventValidate->anmeldefrist_endeValidate("20120110"));
        $this->dateError2YearTest("anmeldefrist_ende","20120110");
        
        $this->assertFalse($this->eventValidate->anmeldefrist_endeValidate(date("Y")."1310"));
        $this->dateError3DateTest("anmeldefrist_ende",date("Y")."1310");
        
        $this->assertFalse($this->eventValidate->anmeldefrist_endeValidate(date("Y")."0230"));
        $this->dateError3DateTest("anmeldefrist_ende",date("Y")."0230");
    }
    
    public function testv_beginnValidate()
    {
        $this->assertTrue($this->eventValidate->v_beginnValidate(date("Y")."0110"));
        $this->assertFalse(array_key_exists("v_beginn", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->v_beginnValidate(""));
        $this->dateError1or2Test("v_beginn","");
        
        $this->assertFalse($this->eventValidate->v_beginnValidate("201201101"));
        $this->dateError1or2Test("v_beginn","201201101");
        
        $this->assertFalse($this->eventValidate->v_beginnValidate("20120110"));
        $this->dateError2YearTest("v_beginn","20120110");
        
        $this->assertFalse($this->eventValidate->v_beginnValidate(date("Y")."1310"));
        $this->dateError3DateTest("v_beginn", date("Y")."1310");
        
        $this->assertFalse($this->eventValidate->v_beginnValidate(date("Y")."0230"));
        $this->dateError3DateTest("v_beginn", date("Y")."0230");
    }
    
    public function testv_endeValidate()
    {
        $this->assertTrue($this->eventValidate->v_endeValidate(date("Y")."0110"));
        $this->assertFalse(array_key_exists("v_ende", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->v_endeValidate(""));
        $this->dateError1or2Test("v_ende" ,"");
        
        $this->assertFalse($this->eventValidate->v_endeValidate("201201101"));
        $this->dateError1or2Test("v_ende" ,"201201101");
        
        $this->assertFalse($this->eventValidate->v_endeValidate("20120110"));
        $this->dateError2YearTest("v_ende","20120110");
        
        $this->assertFalse($this->eventValidate->v_endeValidate(date("Y")."1310"));
        $this->dateError3DateTest("v_ende",date("Y")."1310");
        
        $this->assertFalse($this->eventValidate->v_endeValidate(date("Y")."0230"));
        $this->dateError3DateTest("v_ende", date("Y")."0230");
    }
    
    public function testcpd_kontoValidate()
    {
        $this->assertTrue($this->eventValidate->cpd_kontoValidate("200270"));
        $this->assertFalse(array_key_exists("cpd_konto", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->cpd_kontoValidate(""));
        $this->error1RequiredTest("cpd_konto");
        
        $this->assertFalse($this->eventValidate->cpd_kontoValidate("200270200270"));
        $this->error2LengthTest("cpd_konto", 10, "200270200270");
    }
    
    public function testerloeskontoValidate()
    {
        $this->assertTrue($this->eventValidate->erloeskontoValidate("4510"));
        $this->assertFalse(array_key_exists("erloeskonto", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->erloeskontoValidate(""));
        $this->error1RequiredTest("erloeskonto");
        
        $this->assertFalse($this->eventValidate->erloeskontoValidate("200270200270"));
        $this->error2LengthTest("erloeskonto", 10, "200270200270");
    }
    
    function teststeuerkennzeichenValidate()
    {
        $this->assertTrue($this->eventValidate->steuerkennzeichenValidate("4a"));
        $this->assertFalse(array_key_exists("steuerkennzeichen", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->steuerkennzeichenValidate(""));
        $this->error1RequiredTest("steuerkennzeichen");
        
        $this->assertFalse($this->eventValidate->steuerkennzeichenValidate("200"));
        $this->error2LengthTest("steuerkennzeichen", 2, "200");
    }
    
    function teststeuersatzValidate()
    {
        $this->assertTrue($this->eventValidate->steuersatzValidate("9"));
        $this->assertFalse(array_key_exists("steuersatz", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->steuersatzValidate(""));
        $this->error1RequiredTest("steuersatz");
        
        $this->assertFalse($this->eventValidate->steuersatzValidate("100111"));
        $this->error2LengthTest("steuersatz", 5, "100111");
    }
    
    function testansprechpartnerValidate()
    {
        $this->assertTrue($this->eventValidate->ansprechpartnerValidate("Max Mustermann"));
        $this->assertFalse(array_key_exists("ansprechpartner", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->ansprechpartnerValidate(""));
        $this->error1RequiredTest("ansprechpartner");
        
        $this->assertFalse($this->eventValidate->ansprechpartnerValidate("Maaaxiimiliaaan Muusstermaaaannnnn"));
        $this->error2LengthTest("ansprechpartner", 30, "Maaaxiimiliaaan Muusstermaaaannnnn");
    }
    
    function testansprechpartner_telValidate()
    {
        $this->assertTrue($this->eventValidate->ansprechpartner_telValidate("0221123584"));
        $this->assertFalse(array_key_exists("ansprechpartner_tel", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->ansprechpartner_telValidate(""));
        $this->error1RequiredTest("ansprechpartner_tel");
        
        $this->assertFalse($this->eventValidate->ansprechpartner_telValidate("022112358431584168461"));
        $this->error2LengthTest("ansprechpartner_tel", 20, "022112358431584168461");      
    }
    
    function testorganisationseinheitValidate()
    {
        $this->assertTrue($this->eventValidate->organisationseinheitValidate("BMBF"));
        $this->assertFalse(array_key_exists("organisationseinheit", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->organisationseinheitValidate(""));
        $this->error1RequiredTest("organisationseinheit");
        
        $this->assertFalse($this->eventValidate->organisationseinheitValidate("ImaginaereOrga"));
        $this->error2LengthTest("organisationseinheit", 12, "ImaginaereOrga");
    }
    
    function testansprechpartner_mailValidate()
    {
        $this->assertTrue($this->eventValidate->ansprechpartner_mailValidate("m.mustermann@fzj-juelich.de"));
        $this->assertFalse(array_key_exists("ansprechpartner_mail", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->ansprechpartner_mailValidate(""));
        $assertError = array(1 => array("error" => 1,"options" => ""));
        $this->assertEquals($assertError, $this->eventValidate->getErrorsByKey("ansprechpartner_mail"));
        $this->eventValidate->resetErrorKeyForTesting("ansprechpartner_mail");
        
        $this->assertFalse($this->eventValidate->ansprechpartner_mailValidate("hallo@hallo"));
        $assertError = array(5 => array("error" => 1,"options" => ""));
        $this->assertEquals($assertError, $this->eventValidate->getErrorsByKey("ansprechpartner_mail"));
    }
    
    function teststellvertreter_mailValidate()
    {
        $this->assertTrue($this->eventValidate->stellvertreter_mailValidate(""));
        $this->assertFalse(array_key_exists("stellvertreter_mail", $this->eventValidate->getErrors()));
        
        $this->assertTrue($this->eventValidate->stellvertreter_mailValidate("s.stellvertreter@fzj-juelich.de"));
        $this->assertFalse(array_key_exists("stellvertreter_mail", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->stellvertreter_mailValidate("hallo@hallo"));
        $assertError = array(5 => array("error" => 1,"options" => ""));
        $this->assertEquals($assertError, $this->eventValidate->getErrorsByKey("stellvertreter_mail"));
    }
    
    function teststandardbetragValidate()
    {
        $this->assertTrue($this->eventValidate->standardbetragValidate("100,43"));
        $this->assertFalse(array_key_exists("standardbetrag", $this->eventValidate->getErrors()));
        
        $this->assertFalse($this->eventValidate->standardbetragValidate(""));
        $this->error1RequiredTest("standardbetrag");
        
        $this->assertFalse($this->eventValidate->standardbetragValidate("1234567890123,561"));
        $this->error2LengthTest("standardbetrag", 16, "1234567890123,561");
    }

    public function error1RequiredTest($key)
    {        
        $assertedError = array( 1 => array("error" => 1 ,"options" => ""));
        $this->assertEquals($assertedError, $this->eventValidate->getErrorsByKey($key));
        $this->eventValidate->resetErrorKeyForTesting($key);
    }
    
    public function error2LengthTest($key, $length, $value)
    {
        $assertedError = array( 2 => array("error" => 1, "options" => array("maxlength" => $length, "actuallength" => strlen($value))));
        $this->assertEquals($assertedError, $this->eventValidate->getErrorsByKey($key));
        $this->eventValidate->resetErrorKeyForTesting($key);
    }
    
    public function dateError1or2Test($key, $value)
    {
        if($value == ""){
            $assertedError = array(1 => array("error" => 1,"options" => ""));
        }else{
            $assertedError = array(2 => array("error" => 1, "options" => array("maxlength" => 8, "actuallength" => strlen($value))));
        }
        $this->assertEquals($assertedError, $this->eventValidate->getErrorsByKey($key));
        $this->eventValidate->resetErrorKeyForTesting($key);
    }
    
    public function dateError2YearTest($key, $value)
    {
        $assertedError = array(3 => array("error" => 1, "options" => array("enteredyear" => substr($value, 0, 4))));
        $this->assertEquals($assertedError, $this->eventValidate->getErrorsByKey($key));
        $this->eventValidate->resetErrorKeyForTesting($key);
    }
    
    public function dateError3DateTest($key, $value)
    {
        $assertedError = array(4 => array("error" => 1, "options" => array("entereddate" => $value)));
        $this->assertEquals($assertedError, $this->eventValidate->getErrorsByKey($key));
        $this->eventValidate->resetErrorKeyForTesting($key);
    }

}